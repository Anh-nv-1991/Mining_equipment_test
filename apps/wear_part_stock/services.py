from apps.maintenance.maintenance_helpers import get_replacement_status
from django.db import models
from apps.wear_part_stock.models import WearPartStock, StockMovementLog


def deduct_inventory_for_record(record):
    logs = []

    for task in record.tasks.filter(content_type__model='replacementtemplate'):
        result = getattr(task, 'replacement_result', None)
        print(f"\nüß™ Task ID: {task.id} | Template: {task.template}")
        if not result:
            print("‚ùå Kh√¥ng c√≥ replacement_result")
            continue
        existing_logs = StockMovementLog.objects.filter(maintenance_record=record, task=task)
        if not existing_logs.exists() and not result.completed:
            print("‚ö†Ô∏è Task ch∆∞a ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh")
            continue
        # S·ª≠ d·ª•ng actual_quantity t·ª´ result l√†m s·ªë l∆∞·ª£ng y√™u c·∫ßu hi·ªán t·∫°i
        required_new = result.actual_quantity
        print(f"Required (actual quantity): {required_new}")

        # T√≠nh t·ªïng s·ªë ƒë√£ tr·ª´ t·ª´ c√°c log cho task n√†y
        existing_logs = StockMovementLog.objects.filter(maintenance_record=record, task=task)
        total_deducted = sum(log.quantity for log in existing_logs)
        delta = required_new - total_deducted
        print(f"Total deducted: {total_deducted}, Delta: {delta}")
        if delta == 0:
            continue

        codes = [c.strip() for c in (task.template.manufacturer_id or "").split("/")]
        stocks = WearPartStock.objects.filter(
            models.Q(manufacturer_id__in=codes) | models.Q(alternative_id__in=codes)
        ).order_by('-stock_quantity')
        print(f"üîé T√¨m th·∫•y {stocks.count()} stock ph√π h·ª£p")

        if delta > 0:
            remaining = delta
            # Gi·∫£ s·ª≠ trong tr∆∞·ªùng h·ª£p ƒë∆°n gi·∫£n ch·ªâ c√≥ 1 stock ph√π h·ª£p
            if stocks.count() == 1:
                stock = stocks.first()
                deduct = min(stock.stock_quantity, remaining)
                stock.stock_quantity -= deduct
                stock.save(update_fields=["stock_quantity"])
                logs.append(StockMovementLog.objects.create(
                    stock=stock,
                    maintenance_record=record,
                    task=task,
                    quantity=deduct,
                    shortage=remaining - deduct
                ))
                remaining = 0
            else:
                for stock in stocks:
                    if remaining <= 0:
                        break
                    deduct = min(stock.stock_quantity, remaining)
                    if deduct <= 0:
                        continue
                    stock.stock_quantity -= deduct
                    stock.save(update_fields=["stock_quantity"])
                    logs.append(StockMovementLog.objects.create(
                        stock=stock,
                        maintenance_record=record,
                        task=task,
                        quantity=deduct,
                        shortage=0
                    ))
                    remaining -= deduct
                if remaining > 0:
                    logs.append(StockMovementLog.objects.create(
                        stock=None,
                        maintenance_record=record,
                        task=task,
                        quantity=0,
                        shortage=remaining
                    ))

        elif delta < 0:
            refund_amount = -delta
            # C·∫≠p nh·∫≠t log hi·ªán c√≥ thay v√¨ t·∫°o log m·ªõi v·ªõi gi√° tr·ªã √¢m.
            existing_log = existing_logs.first()
            if existing_log and existing_log.stock:
                stock = existing_log.stock
                print(f"üí∞ Ho√†n tr·∫£ {refund_amount} v√†o {stock.manufacturer_id} (tr∆∞·ªõc: {stock.stock_quantity})")
                stock.stock_quantity += refund_amount
                stock.save(update_fields=["stock_quantity"])
                # C·∫≠p nh·∫≠t log: gi·∫£m s·ªë l∆∞·ª£ng tr·ª´ ƒëi refund_amount.
                existing_log.quantity = existing_log.quantity - refund_amount
                existing_log.save(update_fields=['quantity'])
            else:
                print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y stock ƒë·ªÉ ho√†n tr·∫£")

    return logs

